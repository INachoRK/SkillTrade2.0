package co.edu.uco.skilltrade.business.assembler.dto.concrete;

import java.util.ArrayList;

import java.util.List;

import co.edu.uco.skilltrade.business.assembler.dto.DTODomainAssembler;

import co.edu.uco.skilltrade.business.domain.CursoDomain;
import co.edu.uco.skilltrade.business.domain.UsuarioDomain;
import co.edu.uco.skilltrade.crosscutting.helpers.ObjectHelper;
import co.edu.uco.skilltrade.dto.CursoDTO;
import co.edu.uco.skilltrade.dto.UsuarioDTO;

public class UsuarioDTODomainAssembler implements DTODomainAssembler<UsuarioDomain, UsuarioDTO > {

	private static final DTODomainAssembler<UsuarioDomain, UsuarioDTO> instancia =
			new UsuarioDTODomainAssembler();
	
	private UsuarioDTODomainAssembler() {
		super ();
	}
	
	public static final DTODomainAssembler<UsuarioDomain, UsuarioDTO> obtenerInstancia() {
		return instancia;
	}
	
	@Override
	public final UsuarioDomain ensamblarDominio(final UsuarioDTO dto) {
		var usuarioDtoTmp = ObjectHelper.getObjectHelper().getDefault(dto, new UsuarioDTO());
		return UsuarioDomain.crear(usuarioDtoTmp, null, null);
	}

	@Override
	public final CursoDTO ensamblarDTO(final CursoDomain dominio) {
		var cursoDomainTmp = ObjectHelper.getObjectHelper().getDefault(dominio, CursoDomain.crear());
		return CursoDTO.build().setId(cursoDomainTmp.getId()).setTitulo(cursoDomainTmp.getTitulo()).
				setDescripcion(cursoDomainTmp.getDescripcion()).setCategoria(cursoDomainTmp.getCategoria()).setSubcategoria(cursoDomainTmp.getSubcategoria());
	}
	
	@Override
    public final List<CursoDTO> ensamblarListaDTO(List<CursoDomain> listaDominios) {
        var listaDominiosTmp = ObjectHelper.getObjectHelper()
                .getDefault(listaDominios, new ArrayList<CursoDomain>());
        var resultados = new ArrayList<CursoDTO>();

        for (CursoDomain cursoDomain : listaDominiosTmp) {
            var cursoDtoTmp = ensamblarDTO(cursoDomain);
            resultados.add(cursoDtoTmp);
        }
        return resultados;
    }

}
