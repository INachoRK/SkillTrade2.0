package co.edu.uco.skilltrade.business.facade.concrete;


import co.edu.uco.skilltrade.business.assembler.dto.concrete.UsuarioDTODomainAssembler;
import co.edu.uco.skilltrade.business.facade.ConsultarUsuarioFachada;
import co.edu.uco.skilltrade.business.usecase.ConsultarUsuario;
import co.edu.uco.skilltrade.business.usecase.impl.ConsultarUsuarioImpl;
import co.edu.uco.skilltrade.crosscutting.exceptions.SkillTradeException;
import co.edu.uco.skilltrade.crosscutting.exceptions.custom.BusinessSkillTradeException;
import co.edu.uco.skilltrade.data.dao.factory.DAOFactory;
import co.edu.uco.skilltrade.data.dao.factory.enums.Factory;
import co.edu.uco.skilltrade.dto.UsuarioDTO;

public class ConsultarUsuarioFachadaImpl implements ConsultarUsuarioFachada {
	
	private DAOFactory factory;
	
	public ConsultarUsuarioFachadaImpl() {
		factory = DAOFactory.getFactory(Factory.AZURE_SQL);
	}
	
	public final void ejecutar(final UsuarioDTO usuario) {
		try {
			factory.iniciarTransaccion();
			
			var usuarioDomain = UsuarioDTODomainAssembler.obtenerInstancia().ensamblarDominio(usuario);
			
			ConsultarUsuario useCase = new ConsultarUsuarioImpl(factory);
			useCase.ejecutar(usuarioDomain);
			
			factory.confirmarTransaccion();
		}catch (final SkillTradeException excepcion) {
			factory.cancelarTransaccion();
			throw excepcion;
		}catch (final Exception excepcion) {
			factory.cancelarTransaccion();
			
			var mensajeUsuario = "Se ha presentado un problema tratando de Registrar la información de una nueva ciudad";
			var mensajeTecnico = "Se ha presentado un problema INESPERADO tratando de ejecutar el método de la clase RegistrarCiudadFchadaImpl. Por favor revise la traza completa del problema";
		
			throw new BusinessSkillTradeException(mensajeTecnico, mensajeUsuario);
			
		} finally {
			factory.cerrarConexion();
		}
	}

}
