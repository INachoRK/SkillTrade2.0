package co.edu.uco.skilltrade.data.dao.sql.azuresql;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import co.edu.uco.skilltrade.crosscutting.exceptions.custom.DataSkillTradeException;
import co.edu.uco.skilltrade.crosscutting.exceptions.messagecatalog.MessageCatalogStrategy;
import co.edu.uco.skilltrade.crosscutting.exceptions.messagecatalog.data.CodigoMensaje;
import co.edu.uco.skilltrade.data.dao.UsuarioDAO;
import co.edu.uco.skilltrade.data.dao.sql.SqlConnection;
import co.edu.uco.skilltrade.entity.UsuarioEntity;

public final class UsuarioAzureSqlDAO extends SqlConnection implements UsuarioDAO {

	public UsuarioAzureSqlDAO(final Connection connection) {
		super(connection);
	}

	@Override
	public final void crear(final UsuarioEntity entidad) {
		final var sentenciaSql = new StringBuilder();
		
		sentenciaSql.append("INSERT INTO dbo.Usuario ");
		sentenciaSql.append("(correo, nombreUsuario, contrasena) ");
		sentenciaSql.append("VALUES (?, ?, ?)");
				
        try (final PreparedStatement sentenciaPreparada = getConnection().prepareStatement(sentenciaSql.toString())){
        	sentenciaPreparada.setString(1, entidad.getCorreo());
            sentenciaPreparada.setString(2, entidad.getNombreUsuario());
            sentenciaPreparada.setString(3, entidad.getPassword());
           
            

            sentenciaPreparada.executeUpdate();
        } catch (SQLException exception){
            var mensajeUsuario = "No ha sido posible llevar a cabo el registro de la información del nuevo curso. Por favor intente de nuevo y en caso de pérsisitir el problema, comuniquese con el administrador de la Tienda Chepito...";
            var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00021, entidad.getCorreo());

            throw new DataSkillTradeException(mensajeTecnico, mensajeUsuario, exception);
        }catch (final Exception exception){
            var mensajeUsuario = "No ha sido posible llevar a cabo el registro de la informacion del nuevo pais. Por favor intente de nuevo y en caso de pérsisitir el problema, comuniquese con el administrador de la Tienda Chepito...";
            var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00022, entidad.getCorreo());

            throw new DataSkillTradeException(mensajeTecnico, mensajeUsuario, exception);
        }

	}

	@Override
	public final void actualizar(final UsuarioEntity entidad) {
		final var sentenciaSql = new StringBuilder();
		
		sentenciaSql.append("UPDATE Curso");
		sentenciaSql.append("SET Titulo = ''");
		sentenciaSql.append("WHERE id = 1");

	}

	public final void eliminar(final String correo) {
		final var sentenciaSql = new StringBuilder();
		
		sentenciaSql.append("DELETE FROM Curso");
		sentenciaSql.append("WHERE correo = ?");
		
	}

	@Override
	public final List<UsuarioEntity> consultar(UsuarioEntity entidad) {

		final var sentenciaSql = new StringBuilder();
		
		sentenciaSql.append("SELECT id, nombre");
		sentenciaSql.append("FROM Pais");
		sentenciaSql.append("ORDER BY nombre ASC");
		
		return null;
	}

	@Override
	public void eliminar(int id) {
		
	}
	
	 public final UsuarioEntity consultarPorCorreo(final String correo) {
	        final var sentenciaSql = new StringBuilder();
	        
	        sentenciaSql.append("SELECT correoUsuario, nombreUsuario, contrasena ");
	        sentenciaSql.append("FROM Usuario ");
	        sentenciaSql.append("WHERE correoUsuario = ?");
	        
	        try (final PreparedStatement sentenciaPreparada = getConnection().prepareStatement(sentenciaSql.toString())) {
	            sentenciaPreparada.setString(1, correo);
	            
	            try (final ResultSet resultSet = sentenciaPreparada.executeQuery()) {
	                if (resultSet.next()) {
	                     return UsuarioEntity.build (
	                        resultSet.getString("correoUsuario"),
	                        resultSet.getString("nombreUsuario"),
	                        resultSet.getString("contrasena")
	                    );
	                } else {
	                    return null;
	                }
	            }
	        } catch (SQLException exception) {
	            var mensajeUsuario = "No ha sido posible llevar a cabo la consulta del usuario. Por favor intente de nuevo y en caso de persisitir el problema, comuníquese con el administrador de SkillTrade...";
	            var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00021, correo);

	            throw new DataSkillTradeException(mensajeTecnico, mensajeUsuario, exception);
	        } catch (final Exception exception) {
	            var mensajeUsuario = "No ha sido posible llevar a cabo la consulta del usuario. Por favor intente de nuevo y en caso de persisitir el problema, comuníquese con el administrador de ¿+SkillTrade...";
	            var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00022, correo);

	            throw new DataSkillTradeException(mensajeTecnico, mensajeUsuario, exception);
	        }
	     	}
	 }
